import asyncpg
import logging
from contextlib import asynccontextmanager
from typing import Optional, AsyncGenerator

# Assuming settings are in {{ project_name }}.config.settings
from {{ project_name }}.config.settings import settings

logger = logging.getLogger(__name__)

# Global variable to hold the connection pool
_pool: Optional[asyncpg.Pool] = None

class DatabaseError(Exception):
    """Custom exception for database operations."""
    pass

async def init_db_pool():
    """Initializes the database connection pool."""
    global _pool
    if _pool is not None:
        logger.warning("Database pool already initialized.")
        return

    db_url = settings.DATABASE_URL # Get URL from settings
    if not db_url:
        raise DatabaseError("DATABASE_URL is not configured in settings.")

    # Adjust min/max size as needed
    min_conn = 5
    max_conn = 20
    logger.info(f"Creating database connection pool for {settings.DATABASE_NAME} with {min_conn}-{max_conn} connections...")

    try:
        # Use database URL directly if available and correctly formatted for asyncpg
        # Example: postgresql://user:password@host:port/database
        # asyncpg expects postgres:// or postgresql://
        _pool = await asyncpg.create_pool(
            dsn=db_url.replace("postgresql+psycopg2://", "postgresql://"), # Adapt driver if needed
            min_size=min_conn,
            max_size=max_conn,
            # Add other pool options if necessary (e.g., command_timeout)
        )
        # Optional: Test connection
        async with _pool.acquire() as conn:
             await conn.fetchval("SELECT 1")
        logger.info("Database connection pool created successfully.")

    except (asyncpg.exceptions.InvalidConnectionNameError, OSError, ValueError) as e:
        logger.error(f"Failed to create database pool: Invalid connection parameters or DB not reachable - {e}", exc_info=True)
        _pool = None # Ensure pool is None on failure
        raise DatabaseError(f"Failed to connect to database: {e}") from e
    except Exception as e:
        logger.error(f"Unexpected error creating database pool: {e}", exc_info=True)
        _pool = None # Ensure pool is None on failure
        raise DatabaseError(f"Unexpected error initializing database: {e}") from e


async def close_db_pool():
    """Closes the database connection pool."""
    global _pool
    if _pool:
        logger.info("Closing database connection pool...")
        try:
            await _pool.close()
            logger.info("Database connection pool closed.")
        except Exception as e:
            logger.error(f"Error closing database pool: {e}", exc_info=True)
        finally:
            _pool = None # Ensure pool is set to None after closing attempt
    else:
        logger.warning("Attempted to close a non-existent or already closed database pool.")


async def get_db_pool() -> asyncpg.Pool:
    """Returns the initialized database pool."""
    if _pool is None:
        raise DatabaseError("Database pool has not been initialized.")
    return _pool


class Database:
    """Provides an interface for database operations using the pool."""
    def __init__(self, pool: asyncpg.Pool):
        if not isinstance(pool, asyncpg.Pool):
             raise ValueError("Invalid pool object provided to Database class.")
        self.pool = pool

    @asynccontextmanager
    async def acquire_connection(self) -> AsyncGenerator[asyncpg.Connection, None]:
        """Acquires a connection from the pool."""
        conn: Optional[asyncpg.Connection] = None
        try:
            conn = await self.pool.acquire()
            yield conn
        except Exception as e:
             logger.error(f"Error acquiring or using database connection: {e}", exc_info=True)
             raise DatabaseError(f"Database operation failed: {e}") from e
        finally:
            if conn:
                await self.pool.release(conn)

    # Add common database operations here, e.g.:
    async def fetch(self, query: str, *params):
        async with self.acquire_connection() as conn:
            return await conn.fetch(query, *params)

    async def fetchrow(self, query: str, *params):
        async with self.acquire_connection() as conn:
            return await conn.fetchrow(query, *params)

    async def fetchval(self, query: str, *params):
        async with self.acquire_connection() as conn:
            return await conn.fetchval(query, *params)

    async def execute(self, query: str, *params):
        async with self.acquire_connection() as conn:
            return await conn.execute(query, *params)

# Example of how to get the Database instance (usually done in main.py startup)
# async def get_database() -> Database:
#     pool = await get_db_pool()
#     return Database(pool)