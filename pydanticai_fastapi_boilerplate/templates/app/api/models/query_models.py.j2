from pydantic import BaseModel, Field
from typing import Optional, List, Dict, Any

# --- API Request Models ---

class QueryRequest(BaseModel):
    """Request model for sending a query to the AI agent."""
    query: str = Field(..., description="The natural language query from the user.")
    session_id: Optional[str] = Field(None, description="Optional session ID for maintaining conversation context.")
    # Add other potential request fields, e.g., user_id, specific configurations

# --- API Response Models ---

class ToolCallMetadata(BaseModel):
    """Metadata about a function tool call made by the agent."""
    tool_name: str
    args: Dict[str, Any]
    # tool_call_id: Optional[str] # Depending on LLM provider

class QueryResponseMetadata(BaseModel):
    """Metadata included in the query response."""
    model_used: Optional[str] = Field(None, description="The LLM model that processed the query.")
    tools_used: Optional[List[ToolCallMetadata]] = Field(None, description="List of function tools called during processing.")
    processing_time_ms: Optional[float] = Field(None, description="Time taken to process the query in milliseconds.")
    # Add other relevant metadata

class QueryResponse(BaseModel):
    """Response model for the AI agent's answer."""
    answer: str = Field(..., description="The natural language answer generated by the agent.")
    metadata: Optional[QueryResponseMetadata] = Field(None, description="Optional metadata about the query processing.")

class ErrorResponse(BaseModel):
    """Standard error response model."""
    detail: str = Field("An error occurred.", description="Details about the error.")

# Add other API models as needed, e.g., for specific data structures returned by tools if not just text.